---
- name: Install apache2-packages
  ansible.builtin.apt:
    name: "{{ apache2_packages_combined }}"
    state: present
    update_cache: true
  tags: [install]

- name: Enable/Disable apache2 modules
  community.general.apache2_module:
    name: "{{ item.name }}"
    state: "{{ item.state | default(omit) }}"
    force: "{{ item.force | default(omit) }}"
    ignore_configcheck: "{{ item.ignore_configcheck | default(omit) }}"
    identifier: "{{ item.identifier | default(omit) }}"
  loop: "{{ apache2_modules }}"
  tags: [config]

- name: Start and enable apache2
  ansible.builtin.service:
    name: apache2
    state: started
    enabled: true
  tags: [install]

- name: Set ServerSignature
  ansible.builtin.lineinfile:
    dest: /etc/apache2/conf-available/security.conf
    line: ServerSignature {{ apache2_serversignature }}
    regexp: ^ServerSignature
  tags: [config]

- name: Set ServerTokens
  ansible.builtin.lineinfile:
    dest: /etc/apache2/conf-available/security.conf
    line: ServerTokens {{ apache2_servertokens }}
    regexp: ^ServerTokens
  tags: [config]

- name: Set SSL protocols
  ansible.builtin.lineinfile:
    dest: /etc/apache2/mods-available/ssl.conf
    regexp: '"^\s?SSLProtocol"'
    line: " SSLProtocol {{ apache2_sslproto }}"
  tags: [config]

- name: Set SSL ciphers
  ansible.builtin.lineinfile:
    dest: /etc/apache2/mods-available/ssl.conf
    regexp: '"^\s?SSLCipherSuite"'
    line: " SSLCipherSuite {{ apache2_sslciphers }}"
  tags: [config]

- name: Set SSLHonorCipherOrder
  ansible.builtin.lineinfile:
    dest: /etc/apache2/mods-available/ssl.conf
    regexp: '"^\s?#?SSLHonorCipherOrder"'
    line: " SSLHonorCipherOrder on"
  tags: [config]

- name: Create webroot
  ansible.builtin.file:
    path: "{{ apache2_vhost_dir }}/{{ item.name }}"
    state: directory
    owner: "{{ apache2_user }}"
    group: "{{ apache2_group }}"
    recurse: true
  loop: "{{ apache2_vhosts }}"
  when: item.name is defined and (item.vhost_dir | default(True))
  tags: [config]

- name: Create vhosts
  ansible.builtin.template:
    src: "{{ item.vhost_template | default('vhost.conf.j2') }}"
    dest: /etc/apache2/sites-available/{{ item.name }}.conf
  loop: "{{ apache2_vhosts }}"
  when: item.name is defined
  notify: Restart apache2
  tags: [config]

- name: Enable vhosts
  ansible.builtin.file:
    src: /etc/apache2/sites-available/{{ item.name }}.conf
    dest: /etc/apache2/sites-enabled/{{ item.name }}.conf
    state: link
  loop: "{{ apache2_vhosts }}"
  when: (item.enabled | default(True))
  notify: Restart apache2
  tags: [config]

- name: Disable vhosts
  ansible.builtin.file:
    dest: /etc/apache2/sites-enabled/{{ item.owner }}-{{ item.name }}.conf
    state: absent
  loop: "{{ apache2_vhosts }}"
  when: (item.enabled is defined and not item.enabled)
  ignore_errors: true
  notify: Restart apache2
  tags: [config]

- name: Disable default vhosts
  ansible.builtin.file:
    dest: /etc/apache2/sites-enabled/{{ item }}
    state: absent
  loop:
    - "000-default.conf"
    - default-ssl.conf
  notify: Restart apache2
  tags: [config]

- name: Create vhost dirs
  ansible.builtin.file:
    dest: "{{ apache2_vhost_dir }}/{{ item.name }}"
    owner: "{{ item.owner | default('www-data') }}"
    group: "{{ item.group | default('www-data') }}"
    mode: "{{ item.mode | default('0755') }}"
    state: directory
  loop: "{{ apache2_vhosts }}"
  tags: [config]

- name: Copy certs
  ansible.builtin.copy:
    src: "{{ item.cert }}"
    dest: "{{ apache2_ssl_cert_path }}/{{ item.cert | basename }}"
    force: true
  loop: "{{ apache2_vhosts }}"
  when: item.copycerts is defined and item.copycerts
  notify: Restart apache2
  tags: [config]

- name: Copy keys
  ansible.builtin.copy:
    src: "{{ item.key }}"
    dest: "{{ apache2_ssl_key_path }}/{{ item.key | basename }}"
    force: true
  loop: "{{ apache2_vhosts }}"
  when: item.copycerts is defined and item.copycerts
  notify: Restart apache2
  tags: [config]

- name: Copy certchain
  ansible.builtin.copy:
    src: "{{ item.certchain }}"
    dest: "{{ apache2_ssl_cert_path }}/{{ item.certchain | basename }}"
  loop: "{{ apache2_vhosts }}"
  when:
    - item.copycerts is defined and item.copycerts
    - item.certchain is defined
  notify: Restart apache2
  tags: [config]
